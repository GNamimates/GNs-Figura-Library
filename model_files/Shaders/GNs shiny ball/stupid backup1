--[[--====================================================================---------
░██████╗░███╗░░██╗░█████╗░███╗░░░███╗██╗███╗░░░███╗░█████╗░████████╗███████╗░██████╗
██╔════╝░████╗░██║██╔══██╗████╗░████║██║████╗░████║██╔══██╗╚══██╔══╝██╔════╝██╔════╝
██║░░██╗░██╔██╗██║███████║██╔████╔██║██║██╔████╔██║███████║░░░██║░░░█████╗░░╚█████╗░
██║░░╚██╗██║╚████║██╔══██║██║╚██╔╝██║██║██║╚██╔╝██║██╔══██║░░░██║░░░██╔══╝░░░╚═══██╗
╚██████╔╝██║░╚███║██║░░██║██║░╚═╝░██║██║██║░╚═╝░██║██║░░██║░░░██║░░░███████╗██████╔╝
░╚═════╝░╚═╝░░╚══╝╚═╝░░╚═╝╚═╝░░░░░╚═╝╚═╝╚═╝░░░░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░╚══════╝╚═════╝░
--=================================================================================--]]


function player_init()
    local format = "POSITION_COLOR_TEXTURE_OVERLAY_LIGHT_NORMAL"
    local vertexSource = [==[
    #version 150

    in vec3 Position;
    in vec4 Color;
    in vec2 UV0;
    in ivec2 UV1;
    in ivec2 UV2;
    in vec3 Normal;
    
    uniform mat4 ModelViewMat;
    uniform mat4 ProjMat;
    uniform mat3 worldToCameraPos;

    uniform vec3 Light0_Direction;
    uniform vec3 Light1_Direction;

    uniform sampler2D Sampler1; //Overlay Sampler
    uniform sampler2D Sampler2; //Lightmap Sampler


    out float vertexDistance;
    out vec4 vertexColor;
    out vec4 lightMapColor;
    out vec4 overlayColor;
    out vec2 texCoord0;
    out vec3 normal;
    out vec3 relativeWorldPos;
    out vec3 vertexPos;

    vec4 minecraft_mix_light(vec3 lightDir0, vec3 lightDir1, vec3 normal, vec4 color) {
        lightDir0 = normalize(lightDir0);
        lightDir1 = normalize(lightDir1);
        float light0 = max(0.0, dot(lightDir0, normal));
        float light1 = max(0.0, dot(lightDir1, normal));
        float lightAccum = min(1.0, (light0 + light1) * 0.6 + 0.4);
        return vec4(color.rgb * lightAccum, color.a);
    }

    void main() {
      gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);

      vertexPos = Position;
      vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
      vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color);

      lightMapColor = texelFetch(Sampler2, UV2 / 16, 0);
      overlayColor = texelFetch(Sampler1, UV1, 0);

      texCoord0 = UV0;
      normal = Normal;
    }
  ]==]
  local fragmentSource = [==[
    #version 150

    uniform sampler2D Sampler0;
    uniform sampler2D Sampler1;

    uniform vec4 ColorModulator;
    uniform float FogStart;
    uniform float FogEnd;
    uniform vec4 FogColor;
    uniform vec3 camera_pos;
    uniform vec3 Light0_Direction;
    uniform vec3 Light1_Direction;

    uniform float Shininess;
    uniform mat3 MayaMatrix;

    in float vertexDistance;
    in vec4 vertexColor;
    in vec4 lightMapColor;
    in vec4 overlayColor;
    in vec2 texCoord0;
    in vec3 normal;
    in vec3 vertexPos;

    out vec4 fragColor;

    const float PI = 3.14159;
    const float TAU = 6.28;

    vec2 toAngle(vec3 pos) {
        float x = atan(pos.z,pos.x)/ TAU + 0.5;
        float y = pos.y * 0.5 + 0.5;
        return vec2(x,y);
    }

    vec3 refl(vec3 I, vec3 N) {
        return vec3(I - 2.0 * dot(N, I) * N);
    }
    
    void main() {
	    //fragColor = texture(Sampler0,toAngle(normal.xyz).xy);
	    
        vec3 V = normalize(vertexPos * transpose(MayaMatrix));
        vec4 worldNormal = vec4(MayaMatrix * normal ,0);

	    vec3 reflection = refl(-V, worldNormal.xyz);
        
	    fragColor = vec4(texture(Sampler1,toAngle(reflection)).rgb,0);

        //vec4 Color = texture(Sampler0,texCoord0);
        //if (Color.a == 0.0)discard;
        //fragColor = mix(Color*vertexColor,reflectColor,1);
        
        //fragColor = vec4(vertexPos * transpose(MayaMatrix),0); // vertex pos relative to camera

        //fragColor = v,iewTranspose * normal,0);

        //fragColor = vec4(getWorldMat() * vec3(1,1,1),1.0);
    }
  ]==]
    renderlayers.registerShader("Shader", format, vertexSource, fragmentSource, 2, {camera_pos="vec3",Shininess="float",MayaMatrix="mat3"})
    local intro = function()
        renderlayers.useShader("Shader")
        renderlayers.setTexture(0, "MY_TEXTURE")
        renderlayers.setTexture(1,"MY_TEXTURE_EMISSIVE")
        renderlayers.enableDepthTest()
        renderlayers.disableCull()
    end
    local outro = function()
        renderlayers.restoreDefaults()
    end
    renderlayers.registerRenderLayer("RenderLayer", {}, intro, outro)
    for key, value in pairs(model) do
        value.setRenderLayer("RenderLayer")
    end
end

action_wheel.SLOT_1.setFunction(function ()end)

lastShininess = 1
shininess = 1

sync = false
snycTimer = 0

function tick()
    if action_wheel.getSelectedSlot() == 1 then
        action_wheel.SLOT_1.setTitle("Armor Shininess\n")
        local scroll = client.getMouseScroll()
        shininess = math.clamp(shininess + math.clamp(scroll,-0.11,0.11),0,1)
    end
    if lastShininess ~= shininess then
        lastShininess = shininess
        snycTimer = 10
    end
    if snycTimer > 0 then
        snycTimer = snycTimer - 1
        if snycTimer == 0 then
            snycTimer = -1
            sync = true
        end
    end
end

function render()
    local zero = vectors.worldToCameraPos({0, 0, 0})
    local x = vectors.worldToCameraPos({-1, 0, 0})-zero
    local y = vectors.worldToCameraPos({0, -1, 0})-zero
    local z = vectors.worldToCameraPos({0, 0, -1})-zero
    local matrix = {-x[1], -y[1], -z[1], -x[2], -y[2], -z[2], x[3], y[3], z[3]}
    renderlayers.setUniform("Shader","MayaMatrix",matrix)
    --renderlayers.setUniform("Shader","camera_pos",renderer.getCameraPos())
    --if sync then
    --    renderlayers.setUniform("Shader","Shininess",math.floor((shininess)*10)/10)
    --    sync = false
    --end
end